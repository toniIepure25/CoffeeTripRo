Alright, I need to create a CI configuration based on the provided information. The project uses JavaScript with Express.js, containerized with Docker. It has a package.json and Dockerfile, among others.

First, the job name should reflect the tasks: build-test-lint. The runs-on will be ubuntu-latest, and a 30-minute timeout.

Environment setup starts by checking out the code. Since it's JavaScript, I'll set up Node.js. The project uses Express.js, so no specific build tools beyond npm.

Dependency caching is important. I'll use actions/cache for node_modules, with the key based on package.json and dependencies.

Linting: The project doesn't specify a linter, so I'll set up ESLint. I'll download the latest version and run it on all JS files.

Build stage: npm install followed by building dependencies and running tests using npm test.

Test stage: I'll make it separate, running tests again with a timeout to ensure stability.

Finally, push the Docker image to a registry. I'll set up the credentials as secrets and use docker push.

I'll add all these steps in order, ensuring each is commented for clarity. This should cover the necessary CI/CD steps.
</think>


# FILENAME: .github/workflows/ci.yml
name: CI Pipeline
on: [push, pull_request]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ENVIRONMENT SETUP
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ~/.cache/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        
    # LINTING STAGE
    - name: Configure ESLint
      run: |
        npm install eslint --save-dev
        npx eslint --init
      # COMMENT: Auto-configured since no linter present
    
    - name: Run Lint
      run: npm run lint
      # QUALITY GATE: Fails on lint violations

    # BUILD STAGE
    - name: Install dependencies and build
      run: |
        npm install
        npm run build
      # QUALITY GATE: Fails on compilation errors

    # TEST STAGE
    - name: Run tests
      run: npm test -- --timeout 30000
      # QUALITY GATE: Fails on test failures

    - name: Push Docker Image
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}/app:latest
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USER }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASS }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and Push Docker Image
        run: docker-compose build --no-cache && docker-compose push
